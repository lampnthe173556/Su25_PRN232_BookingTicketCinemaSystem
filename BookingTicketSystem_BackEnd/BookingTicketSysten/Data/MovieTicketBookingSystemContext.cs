    // <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BookingTicketSysten.Models;

public partial class MovieTicketBookingSystemContext : DbContext
{
    public MovieTicketBookingSystemContext(DbContextOptions<MovieTicketBookingSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BookedSeat> BookedSeats { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Cinema> Cinemas { get; set; }

    public virtual DbSet<CinemaHall> CinemaHalls { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<MovieActor> MovieActors { get; set; }

    public virtual DbSet<MovieDirector> MovieDirectors { get; set; }

    public virtual DbSet<MovieFavorite> MovieFavorites { get; set; }

    public virtual DbSet<MovieGenre> MovieGenres { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Seat> Seats { get; set; }

    public virtual DbSet<Show> Shows { get; set; }

    public virtual DbSet<Token> Tokens { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vote> Votes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BookedSeat>(entity =>
        {
            entity.HasKey(e => e.BookedSeatId).HasName("PK__BookedSe__7508A758EF51125F");

            entity.ToTable("BookedSeat");

            entity.HasIndex(e => new { e.ShowId, e.SeatId }, "IX_BookedSeat_ShowID_SeatID");

            entity.HasIndex(e => new { e.SeatId, e.ShowId }, "UQ__BookedSe__07C92DDF0BD7F113").IsUnique();

            entity.Property(e => e.BookedSeatId).HasColumnName("BookedSeatID");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.SeatId).HasColumnName("SeatID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookedSeats)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK_BookedSeat_Booking");

            entity.HasOne(d => d.Seat).WithMany(p => p.BookedSeats)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookedSeat_Seat");

            entity.HasOne(d => d.Show).WithMany(p => p.BookedSeats)
                .HasForeignKey(d => d.ShowId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookedSeat_Show");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__73951ACD95AAD0A9");

            entity.ToTable("Booking", tb => tb.HasTrigger("trg_Booking_UpdateModifiedAt"));

            entity.HasIndex(e => e.ShowId, "IX_Booking_ShowID");

            entity.HasIndex(e => e.UserId, "IX_Booking_UserID");

            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.QrcodeData).HasColumnName("QRCodeData");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Show).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.ShowId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Booking_Show");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Booking_User");
        });

        modelBuilder.Entity<Cinema>(entity =>
        {
            entity.HasKey(e => e.CinemaId).HasName("PK__Cinema__59C926264E9B9FA3");

            entity.ToTable("Cinema", tb => tb.HasTrigger("trg_Cinema_UpdateModifiedAt"));

            entity.HasIndex(e => e.CityId, "IX_Cinema_CityID");

            entity.Property(e => e.CinemaId).HasColumnName("CinemaID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.ContactInfo).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.City).WithMany(p => p.Cinemas)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cinema_City");
        });

        modelBuilder.Entity<CinemaHall>(entity =>
        {
            entity.HasKey(e => e.HallId).HasName("PK__CinemaHa__7E60E274CDA9BE19");

            entity.ToTable("CinemaHall", tb => tb.HasTrigger("trg_CinemaHall_UpdateModifiedAt"));

            entity.HasIndex(e => e.CinemaId, "IX_CinemaHall_CinemaID");

            entity.Property(e => e.HallId).HasColumnName("HallID");
            entity.Property(e => e.CinemaId).HasColumnName("CinemaID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Cinema).WithMany(p => p.CinemaHalls)
                .HasForeignKey(d => d.CinemaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CinemaHall_Cinema");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__City__F2D21A96B307E5EB");

            entity.ToTable("City");

            entity.HasIndex(e => e.Name, "UQ__City__737584F64AF7EFD1").IsUnique();

            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__Comment__C3B4DFAA2C45242C");

            entity.ToTable("Comment", tb => tb.HasTrigger("trg_Comment_UpdateModifiedAt"));

            entity.HasIndex(e => e.MovieId, "IX_Comment_MovieID");

            entity.HasIndex(e => e.UserId, "IX_Comment_UserID");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentText).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Movie).WithMany(p => p.Comments)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_Movie");

            entity.HasOne(d => d.ParentComment).WithMany(p => p.InverseParentComment)
                .HasForeignKey(d => d.ParentCommentId)
                .HasConstraintName("FK_Comment_ParentComment");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_User");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreId).HasName("PK__Genre__0385055EC6B7AA43");

            entity.ToTable("Genre");

            entity.HasIndex(e => e.Name, "UQ__Genre__737584F6C9CA9B1B").IsUnique();

            entity.Property(e => e.GenreId).HasColumnName("GenreID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.HasKey(e => e.MovieId).HasName("PK__Movie__4BD2943A03DE7FB8");

            entity.ToTable("Movie", tb => tb.HasTrigger("trg_Movie_UpdateModifiedAt"));

            entity.HasIndex(e => e.Title, "IX_Movie_Title");

            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Language).HasMaxLength(50);
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.PosterUrl)
                .HasMaxLength(500)
                .HasColumnName("PosterURL");
            entity.Property(e => e.Rating).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.TrailerUrl)
                .HasMaxLength(500)
                .HasColumnName("TrailerURL");
        });

        modelBuilder.Entity<MovieActor>(entity =>
        {
            entity.HasKey(e => e.MovieActorId).HasName("PK__MovieAct__0F76A583A44887AB");

            entity.ToTable("MovieActor");

            entity.HasIndex(e => new { e.MovieId, e.PersonId }, "UQ__MovieAct__01706B83471F5BF2").IsUnique();

            entity.Property(e => e.MovieActorId).HasColumnName("MovieActorID");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RoleName).HasMaxLength(255);

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieActors)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_MovieActor_Movie");

            entity.HasOne(d => d.Person).WithMany(p => p.MovieActors)
                .HasForeignKey(d => d.PersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovieActor_Person");
        });

        modelBuilder.Entity<MovieDirector>(entity =>
        {
            entity.HasKey(e => e.MovieDirectorId).HasName("PK__MovieDir__AEB81F2E362F0C97");

            entity.ToTable("MovieDirector");

            entity.HasIndex(e => new { e.MovieId, e.PersonId }, "UQ__MovieDir__01706B8378620D6E").IsUnique();

            entity.Property(e => e.MovieDirectorId).HasColumnName("MovieDirectorID");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieDirectors)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_MovieDirector_Movie");

            entity.HasOne(d => d.Person).WithMany(p => p.MovieDirectors)
                .HasForeignKey(d => d.PersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovieDirector_Person");
        });

        modelBuilder.Entity<MovieFavorite>(entity =>
        {
            entity.HasKey(e => e.MovieFavoriteId).HasName("PK__MovieFav__1561936951487911");

            entity.ToTable("MovieFavorite");

            entity.HasIndex(e => new { e.UserId, e.MovieId }, "UQ__MovieFav__A335E5EE75AC9260").IsUnique();

            entity.Property(e => e.MovieFavoriteId).HasColumnName("MovieFavoriteID");
            entity.Property(e => e.FavoriteTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieFavorites)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_MovieFavorite_Movie");

            entity.HasOne(d => d.User).WithMany(p => p.MovieFavorites)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_MovieFavorite_User");
        });

        modelBuilder.Entity<MovieGenre>(entity =>
        {
            entity.HasKey(e => e.MovieGenreId).HasName("PK__MovieGen__C18CDB60B8870E2C");

            entity.ToTable("MovieGenre");

            entity.HasIndex(e => new { e.MovieId, e.GenreId }, "UQ__MovieGen__BBEAC46ECDF5A3D3").IsUnique();

            entity.Property(e => e.MovieGenreId).HasColumnName("MovieGenreID");
            entity.Property(e => e.GenreId).HasColumnName("GenreID");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");

            entity.HasOne(d => d.Genre).WithMany(p => p.MovieGenres)
                .HasForeignKey(d => d.GenreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovieGenre_Genre");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieGenres)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_MovieGenre_Movie");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payment__9B556A5833965D10");

            entity.ToTable("Payment", tb => tb.HasTrigger("trg_Payment_UpdateModifiedAt"));

            entity.HasIndex(e => e.BookingId, "IX_Payment_BookingID");

            entity.HasIndex(e => e.BookingId, "UQ__Payment__73951ACCBEA521D5").IsUnique();

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.Booking).WithOne(p => p.Payment)
                .HasForeignKey<Payment>(d => d.BookingId)
                .HasConstraintName("FK_Payment_Booking");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PK__Person__AA2FFB8517B6E868");

            entity.ToTable("Person", tb => tb.HasTrigger("trg_Person_UpdateModifiedAt"));

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Nationality).HasMaxLength(100);
            entity.Property(e => e.PhotoUrl)
                .HasMaxLength(500)
                .HasColumnName("PhotoURL");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE3A01C45F04");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B6160F445C5CD").IsUnique();

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Seat>(entity =>
        {
            entity.HasKey(e => e.SeatId).HasName("PK__Seat__311713D31F734030");

            entity.ToTable("Seat");

            entity.HasIndex(e => new { e.HallId, e.RowNumber, e.ColumnNumber }, "UQ__Seat__D22A2F25723DBA68").IsUnique();

            entity.Property(e => e.SeatId).HasColumnName("SeatID");
            entity.Property(e => e.HallId).HasColumnName("HallID");
            entity.Property(e => e.RowNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.SeatType)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Hall).WithMany(p => p.Seats)
                .HasForeignKey(d => d.HallId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seat_CinemaHall");
        });

        modelBuilder.Entity<Show>(entity =>
        {
            entity.HasKey(e => e.ShowId).HasName("PK__Show__6DE3E0D22C950CBD");

            entity.ToTable("Show", tb => tb.HasTrigger("trg_Show_UpdateModifiedAt"));

            entity.HasIndex(e => e.HallId, "IX_Show_HallID");

            entity.HasIndex(e => e.MovieId, "IX_Show_MovieID");

            entity.HasIndex(e => e.StartTime, "IX_Show_StartTime");

            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.HallId).HasColumnName("HallID");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TicketPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Hall).WithMany(p => p.Shows)
                .HasForeignKey(d => d.HallId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Show_CinemaHall");

            entity.HasOne(d => d.Movie).WithMany(p => p.Shows)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Show_Movie");
        });

        modelBuilder.Entity<Token>(entity =>
        {
            entity.HasKey(e => e.TokenId).HasName("PK__Tokens__658FEE8AC67A3E5C");

            entity.HasIndex(e => e.UserId, "IX_Tokens_UserID");

            entity.HasIndex(e => e.TokenValue, "UQ__Tokens__FE1B80EC0F4BBCE7").IsUnique();

            entity.Property(e => e.TokenId).HasColumnName("TokenID");
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.IssuedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TokenType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TokenValue)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Tokens)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Tokens_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CCAC90D57BA3");

            entity.ToTable("User", tb => tb.HasTrigger("trg_User_UpdateModifiedAt"));

            entity.HasIndex(e => e.Email, "IX_User_Email");

            entity.HasIndex(e => e.Email, "UQ__User__A9D1053440D27777").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LoyaltyPoints)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.RoleId)
                .HasDefaultValue(2)
                .HasColumnName("RoleID");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Role");
        });

        modelBuilder.Entity<Vote>(entity =>
        {
            entity.HasKey(e => e.VoteId).HasName("PK__Vote__52F015E273ACD889");

            entity.ToTable("Vote");

            entity.HasIndex(e => new { e.UserId, e.MovieId }, "UQ__Vote__A335E5EEF27B19D7").IsUnique();

            entity.Property(e => e.VoteId).HasColumnName("VoteID");
            entity.Property(e => e.MovieId).HasColumnName("MovieID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VoteTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Movie).WithMany(p => p.Votes)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vote_Movie");

            entity.HasOne(d => d.User).WithMany(p => p.Votes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vote_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}